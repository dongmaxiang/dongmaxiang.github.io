---
layout: post
title: 设置事务对所有的异常进行回滚
permalink: /设置事务对所有的异常进行回滚
date: 2021-10-08 12:24:31.000000000 +08:00
categories: [java,spring]
tags: [spring,事务]
---

通过分析：开启事务、调用方法、回退事务，的代码之后`TransactionAspectSupport#invokeWithinTransaction`，事务是否回退、事务隔离级别、以及其他配置是由`TransactionAttribute`决定的  
所以我们新写一个重新提供`TransactionAttribute`对象即可

```java
package com.wuyi.mkt.service.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.AbstractBeanDefinition;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Role;
import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;
import org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration;
import org.springframework.transaction.interceptor.DefaultTransactionAttribute;
import org.springframework.transaction.interceptor.NoRollbackRuleAttribute;
import org.springframework.transaction.interceptor.RollbackRuleAttribute;
import org.springframework.transaction.interceptor.RuleBasedTransactionAttribute;
import org.springframework.transaction.interceptor.TransactionAttribute;

import java.lang.reflect.Method;
import java.util.Objects;

/**
 * 事务attributeRollback默认为Throwable
 * ps: 如果没有指定的话
 *
 * @author anyOne
 * @see DefaultTransactionAttribute#rollbackOn(java.lang.Throwable)
 */
@Slf4j
@Configuration
public class TransactionRollbackSupport implements BeanDefinitionRegistryPostProcessor {

    @Override
    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {

    }

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        AbstractBeanDefinition transactionAttributeSource = (AbstractBeanDefinition) beanFactory.getBeanDefinition("transactionAttributeSource");
        transactionAttributeSource.setInstanceSupplier(AllRollback::new);
    }

    /**
     * @see ProxyTransactionManagementConfiguration#transactionAttributeSource()
     */
    private static class AllRollback extends AnnotationTransactionAttributeSource {
        @Override
        protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {
            TransactionAttribute transactionAttribute = super.computeTransactionAttribute(method, targetClass);
            if (!(transactionAttribute instanceof RuleBasedTransactionAttribute)) {
                return transactionAttribute;
            }

            boolean hasRollbackRule = ((RuleBasedTransactionAttribute) transactionAttribute).getRollbackRules()
                    .stream()
                    .filter(t -> !(t instanceof NoRollbackRuleAttribute))
                    .anyMatch(Objects::nonNull);
            // 事务attributeRollback默认为Throwable,如果没有指定的话
            if (hasRollbackRule) {
                return transactionAttribute;
            }
            log.info("set Default transaction rollback exception as Throwable,class:{},method:{}", targetClass.getSimpleName(), method.getName());
            ((RuleBasedTransactionAttribute) transactionAttribute).getRollbackRules()
                    .add(0, new RollbackRuleAttribute(Throwable.class));

            return transactionAttribute;
        }
    }
}
```