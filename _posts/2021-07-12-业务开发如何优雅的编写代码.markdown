---
layout: post
title: 业务开发如何优雅的编写代码
date: 2021-07-12 23:29:00.000000000 +08:00
categories: [a效率,java开发]
tags: [效率]
---

# 背景
我们开发人员，基本都是从搬砖的码农做起，但也有非常优秀的人，一直在做中间件或其他底层通用的逻辑。显然，我们大多数都不够优秀。
那针对业务开发的我们也需要提升自己的技能，而不是每天的CURD，为了提升我们自己，所以在我们的日常开发工作中不仅仅完成任务作为目标，至少还有一些目标之外的思维，如
* 代码阅读性高吗？
* 代码便于维护或协作吗？
* 代码会不会冗余？
* 怎样用更精简的方法实现它呢？
* 自己有没有重复造轮子呢？
* ...  

如果缺少了这些思维的话，那你适合做管理层。  
本文是个总结文，就拿我常在开发中用到的技术展开交流。需要读者点开其他文章依次观看😂
> springboot + mvc + mybatisPlus + dubbo + Saas业务

## 定义通用枚举
* [通用枚举]({{ "/通用枚举" | relative_url }})  
避免魔法值、统一枚举的使用方式
* [springMvc枚举序列化和反序列化]({{ "/mvc枚举序列化和反序列化的配置" | relative_url }})  
定义好通用枚举之后也要配置好序列化和反序列化，使其结合起来  

## 重新加装Mybatis-plus(业务开发必备)
[重新加装MybatisPlus]({{ "/重新加装MybatisPlus" | relative_url }})
[MybatisPlus针对Saas系统的动态多租户插件]({{ "/MybatisPlus针对Saas系统的动态多租户插件" | relative_url }})

## 定义代码校验（协作开发必备）
[应用业务代码应该如何分层]()  
[基于Spring的代码分层校验]()  
[MybatisPlus语法糖的校验]()

## 定义统一异常拦截处理类
## 定义日志打印帮助问题排查
## 定义统一响应包装类
## 定义swagger通用接口文档